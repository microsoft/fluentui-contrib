import { output, type ExecutorContext } from '@nx/devkit';

/* mocked modules - START */
import { readJsonFile, writeJsonFile } from '@nx/devkit';
import { copyFileSync, rmSync } from 'node:fs';
import { execSync } from 'node:child_process';
/* mocked modules - END */

import { type BuildExecutorSchema } from './schema';
import executor from './executor';

jest.mock('node:fs', () => {
  return {
    ...jest.requireActual('node:fs'),
    copyFileSync: jest.fn(),
    rmSync: jest.fn(),
  };
});
jest.mock('node:child_process');
jest.mock('@nx/devkit', () => {
  return {
    ...jest.requireActual('@nx/devkit'),
    readJsonFile: jest.fn(),
    writeJsonFile: jest.fn(),
  };
});

const execSyncMock = execSync as jest.MockedFunction<typeof execSync>;
const readJsonFileMock = readJsonFile as jest.MockedFunction<
  typeof readJsonFile
>;
const writeJsonFileMock = writeJsonFile as jest.MockedFunction<
  typeof writeJsonFile
>;
const copyFileSyncMock = copyFileSync as jest.MockedFunction<
  typeof copyFileSync
>;
const rmSyncMock = rmSync as jest.MockedFunction<typeof rmSync>;

describe('Build Executor', () => {
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  const noop = () => {};

  beforeEach(() => {
    jest.spyOn(output, 'logSingleLine').mockImplementation(noop);
  });

  const options: BuildExecutorSchema = {};

  it(`should fail if project doesn't exist`, async () => {
    const context: ExecutorContext = {
      root: 'tmp/test-workspace',
      projectName: 'proj-one',
      projectsConfigurations: {
        projects: {},
        version: 2,
      },
      cwd: process.cwd(),
      isVerbose: false,
    };

    const output = await executor(options, context);

    expect(output.success).toBe(false);
  });

  it('should build project', async () => {
    const context: ExecutorContext = {
      root: 'tmp/test-workspace',
      projectName: 'proj-one',
      projectsConfigurations: {
        projects: {
          'proj-one': { sourceRoot: 'src', root: 'packages/proj-one' },
        },
        version: 2,
      },
      cwd: process.cwd(),
      isVerbose: false,
    };

    readJsonFileMock.mockReturnValue({
      dependencies: { 'custom-dep': '1.0.0' },
      peerDependencies: { 'one-two': '>=1.0.0 <2.0.0' },
    });

    const output = await executor(options, context);

    expect(output.success).toBe(true);

    // removes dist folder before building
    expect(rmSyncMock.mock.calls.flat()).toMatchInlineSnapshot(`
      [
        "tmp/test-workspace/dist/packages/proj-one",
        {
          "force": true,
          "recursive": true,
        },
      ]
    `);

    // copied assets
    expect(copyFileSyncMock.mock.calls.flat()).toMatchInlineSnapshot(`
      [
        "packages/proj-one/README.md",
        "tmp/test-workspace/dist/packages/proj-one/README.md",
      ]
    `);

    // swc CLI commands that transpile .ts files to .js files
    expect(execSyncMock.mock.calls.flat()).toMatchInlineSnapshot(`
      [
        "npx swc src --strip-leading-paths -d tmp/test-workspace/dist/packages/proj-one/lib --config-file=.swcrc --config module.type=es6",
        {
          "cwd": "packages/proj-one",
        },
        "npx swc src --strip-leading-paths -d tmp/test-workspace/dist/packages/proj-one/lib-commonjs --config-file=.swcrc --config module.type=commonjs",
        {
          "cwd": "packages/proj-one",
        },
      ]
    `);

    // package.json generated by the executor
    const [pkgJsonPath, pkgJsonContent] = writeJsonFileMock.mock.calls.flat();
    expect(pkgJsonPath).toContain(
      '/tmp/test-workspace/dist/packages/proj-one/package.json'
    );
    expect(pkgJsonContent).toMatchInlineSnapshot(`
      {
        "dependencies": {
          "@swc/helpers": "~0.5.1",
          "custom-dep": "1.0.0",
        },
        "exports": {
          ".": {
            "import": "./lib/index.js",
            "node": "./lib-commonjs/index.js",
            "require": "./lib-commonjs/index.js",
            "types": "./src/index.d.ts",
          },
          "./package.json": "./package.json",
        },
        "license": "MIT",
        "main": "./lib-commonjs/index.js",
        "module": "./lib/index.js",
        "peerDependencies": {
          "@types/react": ">=16.8.0 <19.0.0",
          "@types/react-dom": ">=16.8.0 <19.0.0",
          "one-two": ">=1.0.0 <2.0.0",
          "react": ">=16.8.0 <19.0.0",
          "react-dom": ">=16.8.0 <19.0.0",
        },
        "repository": {
          "type": "git",
          "url": "https://github.com/microsoft/fluentui-contrib",
        },
        "sideEffects": false,
        "typings": "./src/index.d.ts",
      }
    `);
  });
});
